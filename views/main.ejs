<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.0/css/all.min.css"
      integrity="sha512-xh6O/CkQoPOWDdYTDqeRdPCVd1SpvCA9XXcUnZS2FmJNp1coAFzvtCN9BmamE+4aHK8yyUHUSCcJHgXloTyT2A=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.1/font/bootstrap-icons.css"
    />
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.27.2/axios.min.js"
      integrity="sha512-odNmoc1XJy5x1TMVMdC7EMs3IVdItLPlCeL5vSUPN2llYKMJ2eByTTAIiiuqLg+GdNr9hF6z81p27DArRFKT7A=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    ></script>
    <script
      src="https://kit.fontawesome.com/db7bfd8989.js"
      crossorigin="anonymous"
    ></script>
    <script
      src="https://code.jquery.com/jquery-3.6.1.min.js"
      integrity="sha256-o88AwQnZB+VDvE9tvIXrMQaPlFFSUTR+nldQm1LuPXQ="
      crossorigin="anonymous"
    ></script>
    <link rel="stylesheet" href="/static/css/main.css" />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-iYQeCzEYFbKjA/T2uDLTpkwGzCiq6soy8tYaI1GyVh/UjpbCx/TYkiZhlZB6+fzT"
      crossorigin="anonymous"
    />
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/js/bootstrap.bundle.min.js"></script>
    <link rel="stylesheet" href="/static/css/recommend.css" />
    <style>
      body{
        overflow-y: scroll
      }
    </style>
    <title>Lettuce</title>
  </head>
  <body>
    <%-include('navbar.ejs') %>

    <div id="recPreview">
    <div class="UserList">
      <div class="myprofile"></div>
      <div class="recommendForm">
        <span class="recommendHeader">회원님을 위한 추천</span><span style="cursor: pointer;" onclick="getRecList();">모두보기</span>
      </div>
      <div id="recommendList">
      </div>
    </div>
  </div>

    <div class="up">
      <a href="#"><i id="upIcon" class="fa-solid fa-circle-up"></i></a>
    </div>
    <div class="down">
      <a href="#downScroll"><i id="downIcon" class="fa-solid fa-circle-down"></i></a>
    </div>

    <div class="main"></div>
    <% if( code == 400 ) { %>
    <div
      style="
        display: flex;
        justify-content: center;
        height: 91vh;
        align-items: center;
      "
    >
      <div class="con">
        <div class="noFollowers">
          <p class="noFollowText">표시할 게시물이 없어요!</p>
          <p class="subText">
            게시물을 작성하거나, <br />
            팔로잉을 추가해서 사람들과 소통해 보세요!
          </p>
          <img id="logo" src="/static/image/logo.png" alt="" />
        </div>
      </div>
    </div>
    <% } else{ %>
    <div class="more">
      <div
        class="virtual"
        style="height: 30px; background-color: rgb(250, 250, 250)"
      ></div>
      <div class="square dnone">
        <div class="spin"></div>
      </div>
    </div>
    <% } %>

    <!-- 좋아요 모달 -->
    <div class="modal" id="likeModal" tabindex="-1">
      <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="Like-title">좋아요 리스트</h5>
            <button
              type="button"
              class="btn-close"
              style="margin: 0; padding: 0"
              data-bs-dismiss="modal"
              aria-label="Close"
            ></button>
          </div>
          <div class="modal-body" id="llist"></div>
        </div>
      </div>
    </div>

  
    <div id="downScroll"></div>

    <script src="../static/js/searchUser.js"></script>

    <script>
      let cnt = 0;

      const $list = document.querySelector(".main");
      const intersectionObserver = new IntersectionObserver(async function (
        entries
      ) {
        if (entries[0].intersectionRatio <= 0) return;
        loadItems();

        console.log("Loaded new items");
      });
      // start observing
      intersectionObserver.observe(document.querySelector(".virtual"));

      function loadItems(number) {
        new Promise((resolve) => {
          document.querySelector(".square").classList.remove("dnone");
          setTimeout(async () => {
            const data = await axios.get(`/fpost/?cnt=${cnt}`);
            resolve(data.data);
          }, 1000);
        }).then(async (data) => {
          console.log(data);
          if (data.code == 200) {
            const main = document.querySelector(".main");
            data.data.forEach((ele) => {
              const card = document.createElement("div");
              card.setAttribute("cnt", cnt);
              card.classList.add("card");
              const header = document.createElement("header");
              const profile = document.createElement("img");
              const delBtn = document.createElement("button");
              delBtn.innerHTML = "<span>삭제</span>";
              delBtn.classList.add("delBtn");
              delBtn.setAttribute("url", `${ele.id}`);
              delBtn.setAttribute("onclick", "deletePost(event)");
              profile.setAttribute("src", ele["User.profile"]);
              const profileWrapper = document.createElement("a");
              profileWrapper.classList.add("mainWrapper");
              profileWrapper.appendChild(profile);
              profileWrapper.setAttribute(
                "href",
                `/profile?id=${ele["User.id"]}`
              );

              const nickName = document.createElement("span");
              nickName.innerText = ele["User.nickName"];
              const nickNameWrapper = document.createElement("a");
              nickNameWrapper.classList.add("nickNameWrapper");
              nickNameWrapper.appendChild(nickName);
              nickNameWrapper.setAttribute(
                "href",
                `profile?id=${ele["User.id"]}`
              );

              const createdAt = document.createElement("span");
              createdAt.innerText = ele.createdAt;
              createdAt.classList.add("createdAt");
              console.log(ele);
              if (ele.myPost) {
                createdAt.append(delBtn);
              }
              header.appendChild(profileWrapper);
              header.appendChild(nickNameWrapper);
              header.appendChild(createdAt);
              card.appendChild(header);
              const carousel = document.createElement("div");
              carousel.setAttribute("id", `a${ele.id}`);
              carousel.setAttribute("class", "carousel slide");
              carousel.setAttribute("data-ride", "carousel");
              const indicator = document.createElement("div");
              indicator.setAttribute("class", "carousel-indicators");

              let ccount = 1;
              indicator.innerHTML += `<button type="button" data-bs-target="#a${ele.id}" data-bs-slide-to="0" class="active" aria-current="true" aria-label="Slide 1"></button>`;
              for (let k = 0; k < ele.src.length - 1; k++) {
                indicator.innerHTML += ` <button type="button" data-bs-target="#a${
                  ele.id
                }" data-bs-slide-to="${ccount}" aria-label="Slide ${
                  ccount + 1
                }"></button>`;
                ccount += 1;
              }

              carousel.appendChild(indicator);
              const wrapper = document.createElement("div");
              wrapper.setAttribute("class", "carousel-inner");
              let numCnt = 0;

              ele.src.forEach((element) => {
                let flag = "active";
                  if (numCnt != 0) {
                    flag = "";
                  }
                  numCnt += 1;
                if (element.type == "img") {
                  const Img = document.createElement("div");
                  Img.setAttribute("class", `carousel-item ${flag}`);
                  const img = document.createElement("img");
                  img.setAttribute("src", element.src);
                  img.setAttribute("alt", "...");
                  img.setAttribute("class", "d-block w-100");
                  Img.appendChild(img);
                  wrapper.appendChild(Img);
                } else {
                  const Img = document.createElement("div");
                  Img.setAttribute("class", `carousel-item ${flag}`);
                  Img.setAttribute("data-carousel-item", "");
                  const video = document.createElement("video");
                  const source = document.createElement("source");
                  source.setAttribute("src", element.src);
                  source.setAttribute("type", "video/mp4");
                  video.setAttribute("class", "videoPosting");
                  video.setAttribute("controls", "");
                  video.setAttribute("autoplay", "");
                  video.setAttribute("muted", "");
                  video.appendChild(source);
                  Img.appendChild(video);
                  wrapper.appendChild(Img);
                }
              });
              carousel.appendChild(wrapper);
              carousel.innerHTML += `<button class="carousel-control-prev" type="button" data-bs-target="#a${ele.id}" data-bs-slide="prev"> <span class="carousel-control-prev-icon" aria-hidden="true"></span> <span class="visually-hidden">Previous</span> </button> <button class="carousel-control-next" type="button" data-bs-target="#a${ele.id}" data-bs-slide="next"> <span class="carousel-control-next-icon" aria-hidden="true"></span> <span class="visually-hidden">Next</span> </button></div>
                          `;
              let flag = "bi-heart"; //좋아요가 없는 상태
              let value = "0"; //좋아요가 없는 상태
              if (ele.like) {
                flag = "bi-heart-fill";
                value = "1";
              }
              let flag2 = "bi-bookmark";
              let value2 = "0";
              if (ele.bookmark) {
                flag2 = "bi-bookmark-fill";
                value2 = "1";
              }

              card.appendChild(carousel);
              card.innerHTML += `<div class="info">
                              <div class="info_left">
                                  <i value="${value}" style="color:#ff69b4"onclick="like(event)" url="${ele.id}" class="bi ${flag}"></i>                              </div>
                              <div class="info_right">
                                <i id="bookmark" url="${ele.id}" value="${value2}" class="bi ${flag2}" onclick="bookmark(event)"></i>
                              </div>
                          </div>`;
              //좋아요 목록
              
                card.innerHTML += `<div class="ll" id="like${ele.id}">${ele.likeCount} 
                <a href="#" data-bs-toggle="modal" data-bs-target="#likeModal" value="${ele.id}"  onclick="likeList(event)">
                  명이 좋아합니다.</a><div>`;

     

              let result = [];

              if (ele.content) {
                let spaceAdd = ele.content.replace(/#/gi, " #");
                let content = spaceAdd.split(" ");
                for (let i = 0; i < content.length; i++) {
                  var tag = content[i].substring(1);
                  if (content[i].includes("#")) {
                    result.push(`<a href = "/explore?tag=${tag}" class="hash">#${tag}</a>`);
                  } else {
                    result.push(content[i]);
                  }
                }
                console.log(result);
                result = result.join(" ");
              }
              card.innerHTML += ` 
                          <div class="comment">
                              ${result}
                          </div>`;
              
                card.innerHTML += `<div class="comment_form">
                              <div class="comments" url="${ele.id}">
                                  <div style="margin-left:16px" id = "cocount" url="${ele.id}">댓글<span class ="commentTime">${ele.commentCount}개의 댓글이 있습니다.</span></div>

                              </div>  
                              <div id="RegisterForm">
                                  <input id="re" type="text" placeholder="댓글 입력..">
                                  <button type="button" id="commentRegister" url="${ele.id}">등록</button>
                              </div>
                          </div>`;
              
              main.appendChild(card);
            });
            let arr = document.querySelectorAll(`div[cnt="${cnt}"] .comments`);
            for (const element of arr) {
              const postId = element.getAttribute("url");
              const data = await axios.get(
                `/comment/comments?PostId=${postId}`
              );
              data.data.forEach(async (ele) => {
                let tag = `<div class="come">
                            <a href="/profile?id=${ele["User.id"]}">
                              <img src="${ele["User.profile"]}"> ${ele["User.nickName"]}
                            </a> : ${ele.comment} <span class=commentTime>${ele.time}</span>
                          </div>`;
                if (ele.me == "true") {
                  console.log(ele.id);
                  tag += `<i class="fa-solid fa-trash" id ="delete" onclick="deleteComent(event)" url="${postId}"value="${ele.id}"></i></i>`;
                }
                const temp = `<div class="commentPlace" id="c${postId}"> ${tag} </div>`;
                element.innerHTML += temp;
              });
            }
            arr = document.querySelectorAll(
              `div[cnt="${cnt}"] #commentRegister`
            );
            for (const ele of arr) {
              ele.addEventListener("click", async (event) => {
                const postId = ele.getAttribute("url");
                const input =
                  event.target.parentNode.querySelector("input").value;
                event.target.parentNode.querySelector("input").value = "";
                if (input.length == 0) {
                  alert("댓글을 입력해 주세요");
                } else {
                  const data = await axios.post("/comment/comments", {
                    comment: input,
                    postId: postId,
                  });

                  if (data.data.code == 200) {
                    const res = await axios.get(
                      `/comment/comments?PostId=${postId}`
                    );
                    const co = await axios.get(
                      `/comment/commentCount?PostId=${postId}`
                    );

                    console.log(co.data.length+"안녕하세요");
                    
                    document.querySelectorAll(`#c${postId}`).forEach((c) => {
                      c.remove();
                    });
                    const space = document.querySelector(
                      `div[url="${postId}"].comments`
                    );
                   
                    const coBody = document.querySelector(
                      `div[url="${postId}"]#cocount`
                    );
                    coBody.innerHTML = "";
                    let count = `댓글<span class ="commentTime">${co.data.length}개의 댓글이 있습니다.</span>`
                    coBody.innerHTML += count;


                    res.data.forEach((res) => {
                      let tag = `<div class="come">
                                  <a href="/profile?id=${res["User.id"]}">
                                    <img src="${res["User.profile"]}"> ${res["User.nickName"]}
                                  </a>:${res.comment} <span class=commentTime>${res.time}</span>
                                </div>`;

                      if (res.me) {
                        tag += `<i class="fa-solid fa-trash" id ="delete" onclick="deleteComent(event)" url="${postId}"value="${res.id}"></i>`;
                      }
                      const div = `<div class="commentPlace"  id="c${postId}"> ${tag} </div>`;
                      space.innerHTML += div;
                      console.log(space);
                    });
                  }
                }
              });
            }
            cnt += 1;
          } else {
            intersectionObserver.unobserve(document.querySelector(".virtual"));
          }
          document.querySelector(".square").classList.add("dnone");
        });
      }
    </script>
    <script>
      // 댓글 지우기
      async function deleteComent(event) {
        console.log(event.target);
        console.log(event.target.getAttribute("value"));
        const comentD = await axios.post("comment/commentDelete", {
          id: event.target.getAttribute("value"),
        });
        if (comentD.data.code == 200) {
          const postId = event.target.getAttribute("url");
          const commentId = event.target.getAttribute("value");
          const res = await axios.get(`/comment/comments?PostId=${postId}`);
          const co = await axios.get(`/comment/commentCount?PostId=${postId}`);
          const coBody = document.querySelector(`div[url="${postId}"]#cocount`);
          coBody.innerHTML = "";
          let count = `댓글<span class ="commentTime">${co.data.length}개의 댓글이 있습니다.</span>`
          coBody.innerHTML += count;

          document.querySelectorAll(`#c${postId}`).forEach((c) => {
            c.remove();
          });
          const space = document.querySelector(`div[url="${postId}"].comments`);
          res.data.forEach((res) => {
            let tag = `<div class="come">
                        <a href="/profile?id=${res["User.id"]}">
                          <img src="${res["User.profile"]}"> ${res["User.nickName"]}
                        </a>:${res.comment}<span class="commentTime">${res.time}</span>
                      </div>`;
            if (res.me) {
              tag += `<i id ="delete" onclick="deleteComent(event)" url="${postId}"value="${res.id}" class="fa-solid fa-trash"></i>`;
            }
            const div = `<div class="commentPlace" id="c${postId}"> ${tag} </div>`;
            space.innerHTML += div;
            console.log(space);
          });
          swal("", "댓글 삭제 성공", "success");
        }
      }

      //좋아요
      async function like(event) {
        if (event.target.getAttribute("value") == "1") {
          event.target.setAttribute("value", "0");
          event.target.classList.remove("bi-heart-fill");
          event.target.classList.add("bi-heart");
        } else {
          event.target.classList.add("bi-heart-fill");
          event.target.classList.remove("bi-heart");
          event.target.setAttribute("value", "1");
        }
        const postId = event.target.getAttribute("url");
        const res = await axios.post("like/likes", { postId: postId });
        if (res.data.code == 200) {
          swal("", "좋아요 등록 완료!", "success");
        } else {
          swal("", "좋아요 취소", "success");
        }
        const send = await axios.get(`like/likeCount?PostId=${postId}`);
        
        console.log(send.data.Count+"와우");

        document.querySelector(
          `#like${postId}`
        ).innerHTML = `<a href="#" data-bs-toggle="modal" data-bs-target="#likeModal" value="${postId}"  onclick="likeList(event)">${send.data.Count}명이 좋아합니다.</a>`;
        console.log(send);
   
      }

      function likeList(event) {
        const postid = event.target.getAttribute("value");

        const data = {
          PostId: postid,
        };
        axios({
          url: "/like/list",
          method: "get",
          params: data,
        }).then((response) => {
          let modalBody = document.querySelector("#llist");
          modalBody.innerHTML = "";
          let html = "";
          let ListMode = response.data.data;
          if(ListMode.length == 0){
            html += `<div id="No">아직 좋아요가 없습니다.</div>`;
            modalBody.innerHTML = html
          }

          for (let i = 0; i < ListMode.length; i++) {
            html += `<a href='profile?id=${ListMode[i].id}' class="userLink">
                        <img class="likeProfile" src="${ListMode[i].profile}" alt="">
                      </div>
                      <div class="userInfo">
                        <span class="userEmail">${ListMode[i].email}</span>
                        <span class="userName">${ListMode[i].nickName}</span>
                      </div>  
                      </a>`;
          }
          modalBody.innerHTML = html;
        });
      }
      //댓글리스트
      function commentlist(event) {
        const postid = event.target.getAttribute("value");
        const data = { PostId: postid };
        axios({
          url: "/comment/commentList",
          method: "get",
          params: data,
        }).then((response) => {
          let modalBody = document.querySelector("#clist");
          modalBody.innerHTML = "";
          let commentBody = document.querySelector("#cocount");
          let html = "";
          let ListMode = response.data;
          
          if(ListMode.length == 0){
            html += `<div id="No">아직 작성된 게시글이 없습니다.</div>`;
            modalBody.innerHTML = html
          }

        
          for (let i = 0; i < ListMode.length; i++) {     
            if (ListMode[i].me) {
              html += `<div class="commentPlace1">
                        <div class="come1">
                          <div>
                            <a href="/profile?id=${ListMode[i]["User.id"]}">
                              <img class="commentProfile" src="${ListMode[i]["User.profile"]}" alt="">
                              ${ListMode[i]["User.nickName"]}:
                            </a>
                              &nbsp;${ListMode[i]["comment"]} <span class=commentTime>${ListMode[i].time}</span>
                          </div>
                          <i id ="deleteComment" onclick="listDelete(event)" url="${postid}"value="${ListMode[i].id}" class="fa-solid fa-trash"></i>
                        </div>
                      </div>`;

            } else {
              html += `<div class="commentPlace1">
                          <div class="come1">
                            <div>
                              <a href="/profile?id=${ListMode[i]["User.id"]}">
                                <img class="commentProfile" src="${ListMode[i]["User.profile"]}" alt="">
                                ${ListMode[i]["User.nickName"]}:
                              </a>
                                &nbsp;${ListMode[i]["comment"]} <span class=commentTime>${ListMode[i].time}</span>
                            </div>
                          </div>
                        </div>`;
            }
          }
          
          modalBody.innerHTML = html;
          
        });
      }
      //댓글 리스트에서 삭제
      async function listDelete(event) {
        const comentD = await axios.post("comment/commentDelete", {
          id: event.target.getAttribute("value"),
        });

        if (comentD.data.code == 200) {
          event.target.parentNode.parentNode.innerHTML = "";
          console.log(event.target.parentNode.parentNode);
          const postid = event.target.getAttribute("url");
          const data = { PostId: postid };
          axios({
            url: "/comment/commentList",
            method: "get",
            params: data,
          }).then((response) => {
            console.log(response.data);
            let modalBody = document.querySelector("#clist");
            modalBody.innerHTML = "";
            let commentBody = document.querySelector("#cocount");
            let html = "";
            let ListMode = response.data;
            for (let i = 0; i < ListMode.length; i++) {
              if (ListMode[i].me) {
                html += `<div class="commentPlace1">
                          <div class="come1">
                            <div>
                              <a href="/profile?id=${ListMode[i]["User.id"]}">
                                <img class="commentProfile" src="${ListMode[i]["User.profile"]}" alt="">
                                ${ListMode[i]["User.nickName"]}:
                              </a>
                                &nbsp;${ListMode[i]["comment"]} <span class=commentTime>${ListMode[i].time}</span>
                            </div>
                            <i id ="deleteComment" onclick="listDelete(event)" url="${postid}"value="${ListMode[i].id}" class="fa-solid fa-trash"></i>
                          </div>
                        </div>`;      
              } else {
                html += `<div class="commentPlace1">
                          <div class="come1">
                            <div>
                              <a href="/profile?id=${ListMode[i]["User.id"]}">
                                <img class="commentProfile" src="${ListMode[i]["User.profile"]}" alt="">
                                ${ListMode[i]["User.nickName"]}:
                              </a>
                                &nbsp;${ListMode[i]["comment"]} <span class=commentTime>${ListMode[i].time}</span>
                            </div>
                          </div>
                        </div>`;
              }
            }

            modalBody.innerHTML = html;
          });
          const target = document.querySelector(`#delete[url="${postid}"]`);
          const wrap = { target: target };
          deleteComent(wrap);
        }
      }
      //북마크
      async function bookmark(event) {
        if (event.target.getAttribute("value") == "0") {
          event.target.setAttribute("value", "1");
          event.target.setAttribute("class", "bi bi-bookmark-fill");
        } else {
          event.target.setAttribute("value", "0");
          event.target.setAttribute("class", "bi bi-bookmark");
        }
        const res = await axios.post("/profile/bookmark", {
          postId: event.target.getAttribute("url"),
        });
        if (res.data.code == 200) {
          swal("", "북마크 등록 완료!", "success");
        } else {
          swal("", "북마크 취소 완료!", "success");
        }
      }
      async function deletePost(event) {
        await axios.delete(
          `/posting/post?id=${event.currentTarget.getAttribute("url")}`
        );
        window.location = "/";
      }
      //버튼
      // $("#downIcon").click(function () {
      //   $("html, body").scrollTop($(document).height());
      // });


      $(document).ready(function() {
      axios({
        url: "/recommend",
        method: "get"
      }).then((response) => {
        otherD = response.data.otherData;
        myD = response.data.myData;
        var myForm = $("#recPreview .myprofile");
        var myDiv = document.createElement("div");
        myDiv.innerHTML =
          `<div class="recUser">
                      <div style="cursor: pointer"  onclick="location.href='profile?id=${myD.id}';" >
                        <img class="recProfile" src="${myD.profile}" alt="">
                        <span class="recUserName">${myD.nickName}</span>
                      </div>
                        &nbsp;
                        <span class="recUserEmail">${myD.email}</span>
                      </div>`;
        myForm.append(myDiv);
        
        // 팔로우 추천 기능
        if (otherD.length > 5) {
        var len = 5
      } else {
        len = otherD.length;
      }
        var form = $("#recPreview #recommendList");
        for (var i = 0; i < len; i++) {
          var div = document.createElement("div");
          var text;
          text =
            `<div class="recUser">
                      <div style="cursor: pointer"  onclick="location.href='profile?id=${otherD[i].id}';" >
                        <img class="recProfile" src="${otherD[i].profile}" alt="">
                        <span class="recUserName">${otherD[i].nickName}</span>
                      </div>
                        &nbsp;
                        <span class="recUserEmail">${otherD[i].email}</span>
                      </div>`;
          if (response.data.hasFriend == false){
            text += `<div class = "recBottmom"><span class="recCnt">TOP ${i+1}. ${otherD[i].cnt}명이 팔로우중입니다.</span><button class = "followButton" onclick ="follow(${otherD[i].id});">팔로우</button></div>`
          }
          else if (otherD[i].cnt > 1) {
            text += `<div class = "recBottmom"><span class="recCnt">${otherD[i].friend}님 외 ${otherD[i].cnt-1} 명이 팔로우중입니다.</span><button class = "followButton" onclick ="follow(${otherD[i].id});">팔로우</button></div>`
          } else {
            text += `<div class = "recBottmom"><span class="recCnt">${otherD[i].friend}님이 팔로우중입니다.</span><button class = "followButton" onclick ="follow(${otherD[i].id});">팔로우</button></div>`
          };
          div.innerHTML = text;
          form.append(div);
        }
      })
    });
    </script>
    <script src="https://cdn.socket.io/4.5.0/socket.io.min.js"></script>
    <script src="../static/js/notification.js"></script>
    <script src="../static/js/recommend.js"></script>
  </body>
</html>
